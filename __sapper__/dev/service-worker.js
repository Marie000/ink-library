(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1579034434658;

	const files = [
		"service-worker-index.html",
		"favicon.png",
		"logo-192.png",
		"logo-512.png",
		"manifest.json",
		"vendor/document-register-element.js",
		"web_modules/common/_rollupPluginBabelHelpers-1f0d6615.js",
		"web_modules/document-register-element.js",
		"web_modules/import-map.json",
		"web_modules/inert-polyfill.js",
		"web_modules/intersection-observer.js"
	];

	const shell = [
		"client/index.ba1ad9a7.js",
		"client/client.484105aa.js",
		"client/index.29af119a.js",
		"client/index.8d8b19ea.js",
		"client/index.d8db46a8.js",
		"client/new.09ec8686.js",
		"client/[id].f9d0fb2b.js",
		"client/index.2be35e07.js",
		"client/settings.805368e7.js",
		"client/logout.ae922e0e.js",
		"client/login.f0ff0a0f.js",
		"client/sapper-dev-client.89e34bae.js"
	];

	const routes = [
		{ pattern: /^\/$/ },
		{ pattern: /^\/library\/?$/ },
		{ pattern: /^\/library\/([^\/]+?)\/?$/ },
		{ pattern: /^\/library\/([^\/]+?)\/new\/?$/ },
		{ pattern: /^\/library\/([^\/]+?)\/([^\/]+?)\/?$/ },
		{ pattern: /^\/profile\/?$/ },
		{ pattern: /^\/profile\/settings\/?$/ },
		{ pattern: /^\/logout\/?$/ },
		{ pattern: /^\/login\/?$/ }
	];

	/* eslint-env browser, serviceworker */
	console.log(routes);

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const toCache = shell.concat(files.filter(path => {
	  return !path.startsWith("iAWriterDuo") && !path.includes(".DS_Store")
	}));
	const cached = new Set(toCache);

	self.addEventListener("install", event => {
	  event.waitUntil(
	    caches
	      .open(ASSETS)
	      .then(cache => cache.addAll(toCache))
	      .then(() => {
	        self.skipWaiting();
	      })
	  );
	});

	self.addEventListener("activate", event => {
	  event.waitUntil(
	    caches.keys().then(async keys => {
	      // delete old caches
	      for (const key of keys) {
	        if (key !== ASSETS) await caches.delete(key);
	      }

	      self.clients.claim();
	    })
	  );
	});

	self.addEventListener("fetch", event => {
	  if (event.request.method !== "GET" || event.request.headers.has("range"))
	    return;

	  const url = new URL(event.request.url);

	  // don't try to handle e.g. data: URIs
	  if (!url.protocol.startsWith("http")) return;

	  // ignore dev server requests
	  if (
	    url.hostname === self.location.hostname &&
	    url.port !== self.location.port
	  )
	    return;

	  // always serve static files and bundler-generated assets from cache
	  if (url.host === self.location.host && cached.has(url.pathname)) {
	    event.respondWith(caches.match(event.request));
	    return;
	  }

	  // for pages, you might want to serve a shell `service-worker-index.html` file,
	  // which Sapper has generated for you. It's not right for every
	  // app, but if it's right for yours then uncomment this section
	  // if (
	  //   url.origin === self.origin &&
	  //   routes.find(route => route.pattern.test(url.pathname))
	  // ) {
	  //   event.respondWith(caches.match("/service-worker-index.html"));
	  //   return;
	  // }

	  if (event.request.cache === "only-if-cached") return;

	  // for everything else, try the network first, falling back to
	  // cache if the user is offline. (If the pages never change, you
	  // might prefer a cache-first approach to a network-first one.)
	  event.respondWith(
	    caches.open(`offline${timestamp}`).then(async cache => {
	      try {
	        const response = await fetch(event.request);
	        cache.put(event.request, response.clone());
	        return response;
	      } catch (err) {
	        const response = await cache.match(event.request);
	        if (response) return response;

	        throw err;
	      }
	    })
	  );
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
